h [Easy Jevko: informal specification draft]

p [
  [Easy Jevko is a very simple and lightweight data interchange format built on ]
  a [
    href=[https://jevko.org]
    [Jevko]
  ]
  [.]
]

p [
  [It provides a minimal alternative to ] 
  a [
    href=[https://json.org]
    [JSON]
  ]
  [.]
]

p [3 kinds of values: strings, arrays, maps.]

p [Easy Jevko code is marked like this:]

ej [
  ph [value ...]
]

p [Usually followed by the corresponding JSON code, marked like so:]

json [
  ph [value ...]
]

p [
  ph [value ...] [ marks a placeholder]
]

hh [Strings]
-- [-------]

p [
  Free-floating text which is not followed by ( is a string.
]

ej [
  str [my string]
]

json [
  str ["my string"]
]

ej [
  str [
    [my string with special chars: ]
    di [esc[]esc[]] [ ] di [esc[]ope[]] [ ] di [esc[]clo[]]
  ] 
]

json [
  str [
    ["my string with special chars: ]esc[] [ ] ope[] [ ] clo[] ["]
  ]
]


ej [
  str [
    ph [...] endl []
    [    my padded multiline string    ]
    endl [] ph [...]
  ] 
]

json [
  str [
    ["]
    ph [...] 
    [\n    my padded multiline string    \n] 
    ph [...]
    ["]
  ]
]

hh [Arrays]
-- [------]

p [An array is several values wrapped in () and concatenated together.]

p [
  [Like in JSON, an array means an ]
  b [ordered] 
  [ list of values.]
]

ej [
  array [
    ope[] ph [value 1] clo[]
    ope[] ph [value 2] clo[]
    ope[] ph [value 3] clo[]
  ]
]

p [The values may be separated or surrounded by whitespace, e.g.:]

ej [
  array [
    ope[] ph [value 1] clo[] endl[]
    ope[] ph [value 2] clo[] endl[]
    ope[] ph [value 3] clo[] endl[]
  ]
]

p [or:]

ej [
  array [
    ope[] ph [value 1] clo[] endl[]
    [  ]ope[] ph [value 2] clo[][    ]
    ope[] ph [value 3] clo[] endl[]
  ]
]

p [etc.]

p [For example an array of 3 strings is written as:]

ej [
  array [
    ope[] str [my string 1] clo[] endl[]
    ope[] str [my string 2] clo[] endl[]
    ope[] str [my string 3] clo[] endl[]
  ]
]

json [
  array [ope[]endl[]
    [  ] str ["my string 1"][,] endl[]
    [  ] str ["my string 2"][,] endl[]
    [  ] str ["my string 3"][,] endl[]
  clo[]]
]

p [Non-whitespace characters are not allowed after the last element of the array:]

ej [
  .[bad]
  array [
    ope[]ph[my value]clo[]
  ] endl[]
  bad [nonblank]
]

p [or anywhere inbetween the elements:]

ej [
  .[bad]
  array [
    ope[]ph[my value]clo[] endl[]
    bad [nonblank ] 
    ope[]ph[my value]clo[]
  ] endl[]
]

ej [
  .[good]
  [(my value)] endl[]
  good [    ]
]

hh [Maps]
-- [----]

p [
  [A map is like an array in that it is composed of several values wrapped in () cocatenated together. However in a map, each value is prefixed by a ]
  b [unique] 
  [ name, forming a sequence of name-value pairs:]
]

p [
  [A map means an ]
  b [unordered] 
  [ set of name-value pairs.]
]

ej [
  map [
    ph [name 1] [ ]ope[] ph [value 1] clo[] endl[]
    ph [name 2] [ ]ope[] ph [value 2] clo[] endl[]
    ph [name 3] [ ]ope[] ph [value 3] clo[] endl[]
    ph[...]
  ]
]

hhh [Name]
--  [----]

p [A name in a map is much like a string, except that it is always followed by a value wrapped in ():]

ej [
  map [
    name [my name] 
    [ ]ope[]
    str [my value]
    clo[]
  ]
]

p [also, leading and trailing whitespace is not considered part of a name:]

ej [
  map [
    [    ] 
    name [my name] 
    [    ]
    ope[]
    str [my value]
    clo[]
  ]
]

p [Both of the above maps are therefore equivalent to the following JSON object:]

json [
  map [
    [{] 
    name ["my name"]
    [: ] 
    str ["my value"]
    [}]
  ]
]

p [In Easy Jevko, it is not possible to enter a name which has leading or trailing whitespace in it. This means that a JSON object like this:]

json [
  {"    my name padded with spaces    ": "my value"}
]

p [Is impossible to represent as a map in Easy Jevko.]

p [Easy Jevko assumes that behavior is usually desirable, as we normally don't want to have leading or trailing whitespace in map names. If we want to ensure that in JSON, we have to trim it. In Easy Jevko this is always unnecessary.]

p [If, for some reason, we'd need whitespace in names then we'd either have to represent our map as an array of pairs:]

ej [
  array [
    ope[]
      array [
        ope[] str [    name    ] clo[]
        ope[] ph [value] clo[]
      ]
    clo[]
  ]
]

p [and convert it to a map on the recieving end.]

p [If this is unnacceptable then we will be better served by a format other than Easy Jevko.]

ej [
  .[bad]
  [my name (my value)
nonblank]
]

hh [Limitations]

p [todo]

pre [
  Covers a subset of JSON.
  values
    objects
      no empty keys
      no padded keys
      no empty object

      unordered, unique entries

    arrays
      no empty array

    strings
      no escape sequences
      

    no numbers, true, false, null

  no syntactically-driven typing
]

hh [Whitespace trimming details]

a [
  href=[https://tc39.es/ecma262/multipage/text-processing.html#sec-string.prototype.trim]

  [ecma262: String.prototype.trim()]
]